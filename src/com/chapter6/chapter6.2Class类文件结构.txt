    1.任何一个Class文件都对应着【唯一一个类或接口】的定义信息。但反过来说，类或接口并不一定都得定义在文件里（
譬如 类或接口也可以通过类加载器直接生成）。

    2.Class文件格式采用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型：【无符号数和表】。

    3.无符号数
        a.属于基本数据类型，有 u1,u2,u4,u8,分别代表1,2,4,8个字节。（一个字节8个二进制单位 0000 0000 即16进制的
    FF）。
        b.用来描述数字、索引应用、数量值或者按照UTF-8编码组成的字符串值。

    4.表
        a.由多个无符号数或者其他表作为数据项构成的符合数据类型，所有表习惯性用“_info”结尾。
        b.表用于描述【有层次关系的复合结构数据】，整个Class文件本质就是一张表。

    **5.常量池（存储两大常量类：字面量和符号引用。）
        *a.字面量：比较接近于Java语言层面的常量概念，如文本字符串、声明为final为常量值等。
        *b符号引用包含三类常量：
            i.类和接口的全限定名。
            ii.字段的名称和描述符。
            iii.方法的名称和描述符。
        java代码在进行Javac编译的时候，并不像C和C++那样有“连接”这一步骤，而是在虚拟机加载Class文件的时候，
    进行动态连接。也就是说，在Class文件中不会保存各个方法、字段的最终布局信息，因此这些字段、方法的符号应用
    不经过运行时期转换的话无法得到真正的内存入口地址，也就无法被虚拟机使用。
        PS：动态连接【虚拟机运行时，需要对用的符号引用的时候，在类的创建或运行时解析、翻译到具体的内存地中】

    6.常量池中每一项常量都是一个表。见书P169
    7.使用 javap -verbose [classFileName] //classFileName不带  .class
        -见本目录 javap使用示例.txt

