    1.java技术体系中的自动化内存分配可以归结为两点：给对象分配内存与回收分配给对象的内存。
    2.对象优先在Eden分配
        a.大多数情况下，对象在新生代Eden去中分配。当Eden区没有足够空间进行分配时，虚拟机会发起一次Mionr GC。
            i.Minor GC(新生代GC):指发生在新生代的垃圾收集动作，因为Java对象大多具备朝生夕死的特性，所以Minor GC
        非常频繁，一般回收速度也比较快。
            ii.老年代GC(Major GC/Full GC):指发生在老年代的GC。Major GC一般是Minor GC的10倍以上。

        b.大对象直接进入老年代
            i.大对象是指，需要大量连续内存空间的Java对象，典型的有很长的字符串和及数组。
            ii.大对象对虚拟机的内存来说是一个坏消息（而比这更糟的是遇到一群“朝生夕死”的“短命大对象”，应该在写程序的时候避免）
            iii.VM args：-XX:PretenureSizeThreshold参数，令大于这个设置值的对象直接在年老代分配，这样可以避免在Eden区
        及两个Survivor区之间发生大量的内存复制。【该参数支队Serial收集器和ParNew收集器生效-XX:+UseSerialGC】
    3.长期存活的对象将进入老年代
        a.虚拟机给每个对象定义了一个对象年龄（Age）计数器。
        b.对象在Survivor区每经过一次Minor GC，年龄+1，虚拟机默认年龄15，超过15岁，被放到年老代。
        c.可以通过参数 -XX:MaxTenuringThreshold设置晋升年老代的阈值。
    4.动态年龄分布
        a.为了更好的适应不同的程序内存情况，虚拟机并不是永远地要求对象的年龄必须达到MaxTenuringThreshold
    才晋升到年老代，如果再Survivor空间中相同年龄所有对象的大小总和大于Survivor空间的一半，那么年龄大于或等于
    该年龄的对象直接进入年老代，无需等待MaxTenuringThreshold的到来。
    5.空间内存担保
        a.在发生Minor GC前，虚拟机会检查年老代的最大连续内存空间是否大于【所有的新生代对象总空间】，如果条件成立，
    Minor GC可以确保安全。如果不成立，查看HandlePromotinFailure设置值是否允许担保失败。如果允许，则虚拟机
    继续检查年老代，最大可用连续空间是否大于历次晋升到年老代对象的平均大小，如果大于，尝试一次Minor GC；如果小于
    或HandlePromotionFailure设置不允许冒险，则这是改为Full GC。
        b.HandlePromotionFailure:在1.7及以后，该参数不会影响到虚拟机的内存分配策略。
        c.在1.6 Update24之后，规则变为，只要年老代连续空间大于新生代对象总大小或历次晋升的平均大小就会进行
    Minor GC，否则进行Full GC。

