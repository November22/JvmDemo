    1.栈帧（Stack Frame）用于支持虚拟机进行【方法调用和方法执行】的数据结构，他是虚拟机运行时数据区
虚拟机栈的元素。 栈帧存储了方法的  局部变量表、操作数栈、动态链接和方法返回地址等信息。每一个方法从调用
开始至执行完成的过程，都对应着一个栈帧从虚拟机栈里面入栈到出栈的过程。
    2.一个线程的中的方法调用链可能会很长，很多方法处于同时执行状态。对于执行引擎来说，在活动线程中，只有
位于栈顶的栈帧才是有效的，称为当前栈帧，与这个栈帧关联的方法称为当前方法。

    4.局部变量表（Local Variable Table）
        是一组变量值得存储空间，用于存放【方法参数】和方法内部定义的【局部变量】。
    5.操作数栈（Operand Stack）又称操作栈
        是一个后入先出栈。操作数栈最大深度在编译的时候确定。操作数栈的每一个元素可以是任意的Java数据类型。
        当一个方法刚刚开始执行的时候，这个方法的操作数栈时空的，在方法的执行过程中，会有各种字节码指令往
    操作数栈中写入和提取内容，也就是出栈/入栈操作。
        举个例子：做整数相加，是先从栈中取出这两个整数，然后相加，再把相加的结果存入操作数栈。
    6.动态链接
        每一个栈帧 都包含一个引用，该引用  指向运行时常量池 中该栈帧所属方法，持有这个引用是为了支持方法
    调用过程中的动态链接。Class文件的常量池中存有大量的符号引用，字节码中的方法调用指令就 以【常量池中指向方
    法的 符号引用】作为参数。这些符号引用一部分会在类加载阶段或者第一次运行的时候就转化为直接引用，这种转化称为
    静态解析。另外一部分在【每一次】运行期间转化为直接引用。这部分称为动态链接。
    PS：常量池中的符号引用用于指向 方法。

    7.方法返回地址
        当一个方法开始执行后，有两种方式可以退出方法，一是正常执行完成，二是遇到未捕获的异常退出。
        无论以何种方式退出，在方法退出后，都要回到方法的调用位置，方法返回时需要在栈帧中保存一些信息，
    用于恢复它的上层方法的执行状态。
        **方法的退出实际等同于把当前的栈帧出栈，因此在退出时可能执行的操作有：恢复上层方法的局部变量表
    和操作数栈，把返回值（如果有）压入调用者栈帧的操作数栈中，调整PC计数器的值以指向方法调用指令后面的
    一条指令等。