    高性能硬件上的程序部署策略
        1.名词解释：
            a.PV:Page View 页面浏览量
            b.Resin:Application Server ,对servlet和JSP提供了良好的支持，性能也比较优良，resin自身采用JAVA语言开发。

        2.高性能硬件部署程序，主要的两种形式
            a.通过64位JDK来使用大内存；
                i.对于用户交互性强、对停顿时间敏感的系统，可以给Java虚拟机分配超大堆的【前提】是有把握把应用的Full GC频率
            控制的足够低，至少不会影响到用户使用，比如，十几个小时才会出现一次Full GC，这样可以通过深夜执行定时任务的
            方式触发Full GC或自动重启应用。
                ii.控制Full GC的频率的【关键】是应用中绝大数对象是否符合“朝生夕死”的原则。即大多数对象的生存时间不应太长，
            尤其是有成批量的、长时间存在的大对象产生，这样才能保证年老代空间的稳定。
                -使用64位JDK管理大内存，可能面临的问题：
                i.内存回收导致的长时间停顿（内存大，发生Full GC停顿的时间就会越长）；
                ii.64位JDK的性能低于32位JDK；
                iii.产生堆内存溢出的堆转储快照大，几乎无法分析；
                iv.相同程序在64位JDK消耗的内存一般比32位的JDK大。
            b.使用若干个32位虚拟机建立逻辑集群来利用硬件资源。
                i.尽量避免节点竞争资源，如磁盘竞争，各节点如果同时访问某个磁盘文件的话，容易导致IO异常。
                ii.难以高效的利用某些资源池，一般都是各个节点建立自己独立的连接池。(可使用集中式的JNDI);
                iii.各节点收32位内存的限制，windows 32位中，一个进程最多只能使用2GB内存，考虑额外的开销最多到1.5GB，对于Linux
            ，可以提升到3GB升级接近4GB，但是2的32次方，最多4GB；
                iv.大量使用本地缓存（如大量使用HashMap）的应用，在集群中个会造成较大的内存浪费，因为每一个节点都有一份缓存，可以
            考虑把本地缓存作为集中式缓存。



